#include <inc/x86.h>
#include <inc/error.h>
#include <inc/string.h>
#include <kern/pmap.h>
#include <dev/ide.h>
#include <dev/idereg.h>
#include <kern/env.h>
#include <kern/sched.h>

enum { ide_verbose = 0 };

struct Env *suspend_env = NULL;

// This is really an IDE channel coupled with one drive
struct ide_channel {
    // Hardware interface
    uint32_t cmd_addr;                             /* command register block */
    uint32_t ctl_addr;                             /* control register block */
    uint32_t bm_addr;                              /* bus master register block */
    uint32_t irq;                                  /* IRQ line */

    // Flags
    bool dma_wait;
    bool irq_wait;

    // Status values
    uint8_t ide_status;
    uint8_t ide_error;
    uint8_t dma_status;

    // Primary/secondary
    uint8_t diskno;

    // size of the disk
    uint32_t dk_bytes;

    // Align to 256 bytes to avoid spanning a 64K boundary.
    // 17 slots is enough for up to 64K data (16 pages), the max for DMA.
#define NPRDSLOTS	17
    /* Bus Master DMA table */
    struct ide_prd bm_prd[NPRDSLOTS] __attribute__((aligned (256)));
};

struct ide_channel *idec = NULL;

static void
ide_select_drive(struct ide_channel *idec)
{
    outb(idec->cmd_addr + IDE_REG_DEVICE, (idec->diskno << 4));
}

static int
ide_wait(struct ide_channel *idec, uint8_t flagmask, uint8_t flagset)
{
    uint64_t ts_start = read_tsc();
    for (;;) {
        idec->ide_status = inb(idec->cmd_addr + IDE_REG_STATUS);
        if ((idec->ide_status & (IDE_STAT_BSY | flagmask)) == flagset)
            break;

        uint64_t ts_diff = read_tsc() - ts_start;
        if (ts_diff > 1024 * 1024 * 1024) {
            cprintf("ide_wait: stuck for %"PRIu64" cycles, status %02x\n",
                    ts_diff, idec->ide_status);
            return -E_BUSY;
        }
    }

    if (idec->ide_status & IDE_STAT_ERR) {
        idec->ide_error = inb(idec->cmd_addr + IDE_REG_ERROR);
        cprintf("ide_wait: error, status %02x error bits %02x\n",
                idec->ide_status, idec->ide_error);
    }

    if (idec->ide_status & IDE_STAT_DF)
        cprintf("ide_wait: data error, status %02x\n", idec->ide_status);

    return 0;
}

/* Two very simple pio read/write functions */
int
ide_pio_read(uint32_t secno, void *dst, size_t nsecs)
{
    int r;
    assert(nsecs <= 256);

    ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);

    outb(idec->cmd_addr+IDE_REG_SECTOR_COUNT, nsecs);
    outb(idec->cmd_addr+IDE_REG_LBA_LOW, secno & 0xFF);
    outb(idec->cmd_addr+IDE_REG_LBA_MID, (secno >> 8) & 0xFF);
    outb(idec->cmd_addr+IDE_REG_LBA_HI, (secno >> 16) & 0xFF);
    outb(idec->cmd_addr+IDE_REG_DEVICE,
         (0xE0 | ((idec->diskno)<<4) | ((secno>>24)&0x0F)));
    outb(idec->cmd_addr+IDE_REG_CMD, IDE_CMD_READ);

    for(; nsecs > 0; nsecs--, dst += SECTSIZE) {
        if((r = ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY)) < 0)
            return r;
        insl(idec->cmd_addr+IDE_REG_DATA, dst, SECTSIZE/4);
    }

    return 0;
}

int __attribute__((__unused__))
ide_pio_write(uint32_t secno, const void *src, size_t nsecs)
{
    int r;
    assert(nsecs <= 256);

    ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);

    outb(idec->cmd_addr+IDE_REG_SECTOR_COUNT, nsecs);
    outb(idec->cmd_addr+IDE_REG_LBA_LOW, secno & 0xFF);
    outb(idec->cmd_addr+IDE_REG_LBA_MID, (secno >> 8) & 0xFF);
    outb(idec->cmd_addr+IDE_REG_LBA_HI, (secno >> 16) & 0xFF);
    outb(idec->cmd_addr+IDE_REG_DEVICE,
         (0xE0 | ((idec->diskno)<<4) | ((secno>>24)&0x0F)));
    outb(idec->cmd_addr+IDE_REG_CMD, IDE_CMD_WRITE);

    for(; nsecs > 0; nsecs--, src += SECTSIZE) {
        if((r = ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY)) < 0)
            return r;
        outsl(idec->cmd_addr+IDE_REG_DATA, src, SECTSIZE/4);
    }

    return 0;
}

static void
ide_dma_irqack(struct ide_channel *idec)
{
    outb(idec->bm_addr + IDE_BM_STAT_REG,
         inb(idec->bm_addr + IDE_BM_STAT_REG));
}

static void
ide_intr(void *arg)
{
    // Lab5: your code here
	struct ide_channel *idec = arg;
    if(ide_verbose)
        cprintf("ide_intr\n");

    if (idec->irq_wait == 0) {
        if(ide_verbose) {
            cprintf("idec->irq_wait=%d: just return\n",
                    idec->irq_wait);
        }
        inb(idec->cmd_addr + IDE_REG_STATUS);
        assert((inb(idec->ctl_addr) & (IDE_CTL_NIEN)) == 0);
        ide_dma_irqack(idec);
        outb(IO_PIC2, 0x20);
        return;
    }

    idec->irq_wait = 0;

    //check dma status....
    assert((inb(idec->ctl_addr) & (IDE_CTL_NIEN)) == 0);
    envs[1].env_status = ENV_RUNNABLE;
    //cprintf("bm status is %02x\n", inb(idec->bm_addr + IDE_BM_STAT_REG));
    //cprintf("bm cmd reg is %x\n", inb(idec->bm_addr + IDE_BM_CMD_REG));

    //outb(idec->bm_addr + IDE_BM_CMD_REG,
    //inb(idec->bm_addr + IDE_BM_CMD_REG)&(~IDE_BM_CMD_START));
    outb(IO_PIC2, 0x20);
    //ide_dma_irqack(idec);
    sched_yield();
    return;
}

/* Two simple dma read/write functions. Currently in JOS, however, read
   and write are blocking and at block granularity(4KB), so our DMA is
   oversimplified -- the transfer size is always 4KB. */
int
ide_dma_read(uint32_t secno, void *dst, size_t nsecs)
{
    // Lab5: your code here
//panic("ide_dma_read not implemented");
        assert(nsecs == 8);//8*512byte = 4kB
        //cprintf("dma_read\n");
        //cprintf("dma_read(%x, %x, %x)\n", secno, dst, nsecs);

        pte_t *pte = pgdir_walk(curenv->env_pgdir, dst, 1);

        uint8_t bm_cmd = inb(idec->bm_addr + IDE_BM_CMD_REG);
        uint8_t bm_status = inb(idec->bm_addr + IDE_BM_STAT_REG);
        bm_cmd |= (IDE_BM_CMD_START);
        //cprintf("bm_cmd is %02x\n", bm_cmd);
        bm_cmd &= (~IDE_BM_CMD_WRITE);

        bm_status &= (~IDE_BM_STAT_ERROR);
        bm_status &= (~IDE_BM_STAT_INTR);

        idec->bm_prd[0].addr = PTE_ADDR(pte[0]);
        //always 4k and one slot enough
        idec->bm_prd[0].count = nsecs*512 | IDE_PRD_EOT;

        ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);

        outb(idec->bm_addr + IDE_BM_STAT_REG, bm_status);

        outb(idec->cmd_addr+IDE_REG_SECTOR_COUNT, nsecs);
        outb(idec->cmd_addr+IDE_REG_LBA_LOW, secno & 0xFF);
        outb(idec->cmd_addr+IDE_REG_LBA_MID, (secno >> 8) & 0xFF);
        outb(idec->cmd_addr+IDE_REG_LBA_HI, (secno >> 16) & 0xFF);
        outb(idec->cmd_addr+IDE_REG_DEVICE,
             (0xE0 | ((idec->diskno)<<4) | ((secno>>24)&0x0F)));
        outb(idec->cmd_addr+IDE_REG_CMD, IDE_CMD_READ_DMA);

        //ide_dma_irqack(idec);

        outl(idec->bm_addr + IDE_BM_PRDT_REG, PADDR(idec->bm_prd));
        outb(idec->bm_addr + IDE_BM_CMD_REG, bm_cmd);

        ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);

        // Lab5: Your code here.
        //ide_dma_irqack(idec);
        idec->irq_wait = 1;
        curenv->env_status = ENV_NOT_RUNNABLE;
        //cprintf("out dma read\n");
        sched_yield();
    return 0;
}

int __attribute__((__unused__))
ide_dma_write(uint32_t secno, const void *src, size_t nsecs)
{
    // Lab5: your code here
    return 0;
}

static void
ide_string_shuffle(char *s, int len)
{
    int i;
    for (i = 0; i < len; i += 2) {
        char c = s[i+1];
        s[i+1] = s[i];
        s[i] = c;
    }

    s[len-1] = '\0';            /* force the string to end... */
}

static int
ide_pio_in(struct ide_channel *idec, void *buf, uint32_t num_sectors)
{
    char *cbuf = (char *) buf;

    for (; num_sectors > 0; num_sectors--, cbuf += SECTSIZE) {
        int r = ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);
        if (r < 0)
            return r;

        if ((idec->ide_status & (IDE_STAT_DF | IDE_STAT_ERR)))
            return -E_IO;

        insl(idec->cmd_addr + IDE_REG_DATA, cbuf, SECTSIZE/4);
    }

    return 0;
}

static int __attribute__((__unused__))
ide_pio_out(struct ide_channel *idec, const void *buf, uint32_t num_sectors)
{
    const char *cbuf = (const char *) buf;

    for (; num_sectors > 0; num_sectors--, cbuf += SECTSIZE) {
        int r = ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);
        if (r < 0)
            return r;

        if ((idec->ide_status & (IDE_STAT_DF | IDE_STAT_ERR)))
            return -E_IO;

        outsl(idec->cmd_addr + IDE_REG_DATA, cbuf, SECTSIZE / 4);
    }

    return 0;
}

static union {
    struct identify_device id;
    char buf[512];
} identify_buf;

static int
idec_init(struct ide_channel *idec)
{
    int i;
    outb(idec->cmd_addr + IDE_REG_DEVICE, idec->diskno << 4);
    outb(idec->cmd_addr + IDE_REG_CMD, IDE_CMD_IDENTIFY);

    cprintf("Probing IDE disk %d..\n", idec->diskno);
    if (ide_pio_in(idec, &identify_buf, 1) < 0)
        return -E_INVAL;

    ide_string_shuffle(identify_buf.id.serial,
                       sizeof(identify_buf.id.serial));
    ide_string_shuffle(identify_buf.id.model,
                       sizeof(identify_buf.id.model));
    ide_string_shuffle(identify_buf.id.firmware,
                       sizeof(identify_buf.id.firmware));

    int udma_mode = -1;
    // Lab5: your code here

    if (ide_verbose)
        cprintf("IDE device (%d sectors, UDMA %d%s): %1.40s\n",
                identify_buf.id.lba_sectors, udma_mode,
                idec->bm_addr ? ", bus-master" : "",
                identify_buf.id.model);

    if (!(identify_buf.id.hwreset & IDE_HWRESET_CBLID)) {
        cprintf("IDE: 80-pin cable absent, not enabling UDMA\n");
        udma_mode = -1;
    }

    if (udma_mode >= 0) {
        outb(idec->cmd_addr + IDE_REG_DEVICE, idec->diskno << 4);
        outb(idec->cmd_addr + IDE_REG_FEATURES, IDE_FEATURE_XFER_MODE);
        outb(idec->cmd_addr + IDE_REG_SECTOR_COUNT,
             IDE_XFER_MODE_UDMA | udma_mode);
        outb(idec->cmd_addr + IDE_REG_CMD, IDE_CMD_SETFEATURES);

        ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);
        if ((idec->ide_status & (IDE_STAT_DF | IDE_STAT_ERR)))
            cprintf("IDE: Unable to enable UDMA\n");
    }

    // Enable write-caching
    outb(idec->cmd_addr + IDE_REG_DEVICE, idec->diskno << 4);
    outb(idec->cmd_addr + IDE_REG_FEATURES, IDE_FEATURE_WCACHE_ENA);
    outb(idec->cmd_addr + IDE_REG_CMD, IDE_CMD_SETFEATURES);

    ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);
    if ((idec->ide_status & (IDE_STAT_DF | IDE_STAT_ERR)))
        cprintf("IDE: Unable to enable write-caching\n");

    // Enable read look-ahead
    outb(idec->cmd_addr + IDE_REG_DEVICE, idec->diskno << 4);
    outb(idec->cmd_addr + IDE_REG_FEATURES, IDE_FEATURE_RLA_ENA);
    outb(idec->cmd_addr + IDE_REG_CMD, IDE_CMD_SETFEATURES);

    ide_wait(idec, IDE_STAT_DRDY, IDE_STAT_DRDY);
    if ((idec->ide_status & (IDE_STAT_DF | IDE_STAT_ERR)))
        cprintf("IDE: Unable to enable read look-ahead\n");

    // The disk size
    idec->dk_bytes = identify_buf.id.lba_sectors * 512;

    uint8_t bm_status = inb(idec->bm_addr + IDE_BM_STAT_REG);
    if (bm_status & IDE_BM_STAT_SIMPLEX)
        cprintf("Simplex-mode IDE bus master, potential problems later..\n");

    // Enable interrupts (clear the IDE_CTL_NIEN bit)
    outb(idec->ctl_addr, 0);

    // Final note: irq is initialized statically...
    return 0;
}

int
ide_init(struct pci_func *pcif)
{
    struct Page *pp;
    int r = page_alloc(&pp);
    if (r < 0)
        return r;

    idec = page2kva(pp);
    memset(idec, 0, sizeof(struct ide_channel));
    static_assert(PGSIZE >= sizeof(*idec));
    pci_func_enable(pcif);
    if(ide_verbose)
        cprintf("  ide_init: pcif->reg_base[0]: 0x%x, pcif->reg_base[1]: 0x%x\n",
                pcif->reg_base[0], pcif->reg_base[1]+2);

    // Use the first IDE channel on the IDE controller
    idec->cmd_addr = pcif->reg_size[0] ? pcif->reg_base[0] : 0x1f0;
    idec->ctl_addr = pcif->reg_size[1] ? pcif->reg_base[1] + 2 : 0x3f6;
    idec->bm_addr = pcif->reg_base[4];
    idec->irq = IDE_IRQ;

    cprintf("  ide_init: cmd_addr: 0x%x, ctl_addr: 0x%x, bm_addr: 0x%x, irq: %d\n",
            idec->cmd_addr, idec->ctl_addr, idec->bm_addr, idec->irq);

    // Enable IDE irq
	cprintf("	Setup IDE interrupt via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<IRQ_IDE));
	cprintf("	unmasked IDE interrupt\n");

    // Set the irq op
    disk_irq_op.arg = idec;

    // Try to initialize the second IDE drive (secondary) first
    idec->diskno = 1;
    if (idec_init(idec) >= 0)
        return 1;

    // Try the primary drive instead..
    idec->diskno = 0;
    if (idec_init(idec) >= 0)
        return 1;

    // Doesn't seem to work
    page_free(pp);
    return 0;
}

irq_op_t disk_irq_op = {
    .irq = IDE_IRQ,
    .handler = ide_intr,
    .arg = NULL,
};
